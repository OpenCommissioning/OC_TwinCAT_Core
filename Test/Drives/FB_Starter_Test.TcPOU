<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Starter_Test" Id="{29bd84b8-4f06-09ff-2a22-4310f79466dc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Starter_Test EXTENDS FB_TestSuite
VAR
	fbStarter : FB_Starter;
	
	fExpectedReal 		: REAL;
	fResultReal 		: REAL;
	bExpectedBool 		: BOOL;
	bResultBool 		: BOOL;
	fExpectedDataOut 	: REAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_GetControlData();
Test_GetControlDataSWAP();
Test_SetStatusData();
Test_SetStatusDataSWAP();

//Test_DriveNoMovement();
//Test_DriveRunningCw();
//Test_DriveRunningCcw();
//Test_AssignProcessData();]]></ST>
    </Implementation>
    <Method Name="Test_SetStatusDataSWAP" Id="{0588ba99-b9f3-00f8-3f87-27921c60a060}">
      <Declaration><![CDATA[METHOD Test_SetStatusDataSWAP : BOOL
VAR
	stExpectedStatusData 	: ST_StarterStatusData;
	nExpectedStatusData		: WORD;	
	stActualStatusData 		: ST_StarterStatusData;
	nActualStatusData		: WORD;		
	fbStarter 				: FB_Starter;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set Status Data SWAP');

stExpectedStatusData.Ready := TRUE;
stExpectedStatusData.Input1 := TRUE;
stExpectedStatusData.Input2 := TRUE;

MEMCPY(ADR(nExpectedStatusData), ADR(stExpectedStatusData), 2);
nExpectedStatusData := HOST_TO_BE16(nExpectedStatusData);

fbStarter.SetStatusData(stExpectedStatusData, ADR(nActualStatusData), TRUE);

AssertEquals(Expected := nExpectedStatusData,
             Actual := nActualStatusData,
             Message := 'nStatusData is not equal');
		
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_DriveRunningCw" Id="{0c188aee-bad2-02ac-3673-cf6fe95d380e}">
      <Declaration><![CDATA[METHOD Test_DriveRunningCw
VAR
	nCycleCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Starter is running clock wise with 0 speed');
fbStarter.stControlData.MotorCW := TRUE;
fbStarter.stControlData.MotorCCW := FALSE;
fbStarter.stControlData.BrakeActuation := TRUE;

fbStarter.stConfig.fVelocity := 0;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;

bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');	
			 
TEST_FINISHED();
//######################################################
TEST('Starter is running clock wise with 100 speed');

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fbStarter.stControlData.MotorCW := TRUE;
fbStarter.stControlData.MotorCCW := FALSE;
fbStarter.stControlData.BrakeActuation := TRUE;

fExpectedReal := 10;
bExpectedBool := TRUE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct'); 
			 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_GetControlDataSWAP" Id="{35719f5d-f774-076c-2499-82e57acb259a}">
      <Declaration><![CDATA[METHOD Test_GetControlDataSWAP : BOOL
VAR
	stExpectedControlData 		: ST_StarterControlData;
	nExpectedControlData		: WORD;	
	nExpectedControlDataSWAP	: WORD;
	stActualControlData 		: ST_StarterControlData;
	nActualControlData			: WORD;		
	fbStarter 					: FB_Starter;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Get Control Data SWAP');

stExpectedControlData.BrakeActuation := TRUE;
stExpectedControlData.DisQuickStop := TRUE;

MEMCPY(ADR(nExpectedControlData), ADR(stExpectedControlData), 2);
nExpectedControlDataSWAP := HOST_TO_BE16(nExpectedControlData);

fbStarter.GetControlData(stActualControlData, ADR(nExpectedControlDataSWAP), TRUE);
MEMCPY(ADR(nActualControlData), ADR(stActualControlData), 2);

AssertEquals(Expected := nExpectedControlData,
             Actual := nActualControlData,
             Message := 'nControlData is not equal');
		
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_SetStatusData" Id="{6fd324bb-c616-0571-1a47-553507790713}">
      <Declaration><![CDATA[METHOD Test_SetStatusData : BOOL
VAR
	stExpectedStatusData 	: ST_StarterStatusData;
	nExpectedStatusData		: WORD;	
	stActualStatusData 		: ST_StarterStatusData;
	nActualStatusData		: WORD;		
	fbStarter 				: FB_Starter;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set Status Data');

stExpectedStatusData.Ready := TRUE;
stExpectedStatusData.Input1 := TRUE;
stExpectedStatusData.Input2 := TRUE;

MEMCPY(ADR(nExpectedStatusData), ADR(stExpectedStatusData), 2);

fbStarter.SetStatusData(stExpectedStatusData, ADR(nActualStatusData), FALSE);

AssertEquals(Expected := nExpectedStatusData,
             Actual := nActualStatusData,
             Message := 'nStatusData is not equal');
		
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_GetControlData" Id="{7507c81d-817a-0791-001b-7f59fa7a4e8e}">
      <Declaration><![CDATA[METHOD Test_GetControlData : BOOL
VAR
	stExpectedControlData 	: ST_StarterControlData;
	nExpectedControlData	: WORD;	
	stActualControlData 	: ST_StarterControlData;
	nActualControlData		: WORD;		
	fbStarter 				: FB_Starter;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Get Control Data');

stExpectedControlData.BrakeActuation := TRUE;
stExpectedControlData.DisQuickStop := TRUE;

MEMCPY(ADR(nExpectedControlData), ADR(stExpectedControlData), 2);

fbStarter.GetControlData(stActualControlData, ADR(nExpectedControlData), FALSE);
MEMCPY(ADR(nActualControlData), ADR(stActualControlData), 2);

AssertEquals(Expected := nExpectedControlData,
             Actual := nActualControlData,
             Message := 'nControlData is not equal');
		
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_AssignProcessData" Id="{ad32d664-19f8-0b96-103c-b179c4b29e17}">
      <Declaration><![CDATA[METHOD Test_AssignProcessData : REFERENCE TO FB_Test
VAR
	fbStarter 				: FB_Starter;
	nControlData 			: WORD;
	nStatusData				: WORD;
	
	nExpectedStatusData		: WORD;
	
	nActualControlData 		: WORD;
	nActualStatusData		: WORD;
	stActualControlData 	: ST_StarterControlData;
	stActualStatusData		: ST_StarterStatusData;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Assign Process data');

nControlData := 255;
nStatusData := 0;

fbStarter.AssignProcessData(nControlData, nStatusData);
fbStarter();

stActualControlData := fbStarter.stControlData;
stActualStatusData := fbStarter.stStatusData;

MEMCPY(ADR(nActualControlData), ADR(stActualControlData), 2);
MEMCPY(ADR(nActualStatusData), ADR(stActualStatusData), 2);

AssertEquals(Expected := nControlData,
             Actual := nActualControlData,
             Message := 'nControlData is not correct');	
		
nExpectedStatusData := 1;
	 
AssertEquals(Expected := nExpectedStatusData,
             Actual := nStatusData,
             Message := 'nStatusData is not correct');	

TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_DriveNoMovement" Id="{bf12adb4-3cdf-0cbf-2405-3a9c3938ab6c}">
      <Declaration><![CDATA[METHOD Test_DriveNoMovement
VAR
	nCycleCount : INT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Starter no movement, CW/CCW missing');

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fbStarter.stControlData.MotorCW := FALSE;
fbStarter.stControlData.MotorCCW := FALSE;
fbStarter.stControlData.BrakeActuation := TRUE;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'fSpeed is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');		
			 
TEST_FINISHED();
//######################################################
TEST('Starter no movement, Brake missing, CW');

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fbStarter.stControlData.MotorCW := TRUE;
fbStarter.stControlData.MotorCCW := FALSE;
fbStarter.stControlData.BrakeActuation := FALSE;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');				 
			 		 
TEST_FINISHED();

//######################################################
TEST('Starter no movement, Brake missing, CCW');

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fbStarter.stControlData.MotorCW := FALSE;
fbStarter.stControlData.MotorCCW := TRUE;
fbStarter.stControlData.BrakeActuation := FALSE;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');			 
			 
TEST_FINISHED();
//######################################################
TEST('Starter no movement, CW and CCW active');

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fbStarter.stControlData.MotorCW := TRUE;
fbStarter.stControlData.MotorCCW := TRUE;
fbStarter.stControlData.BrakeActuation := TRUE;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 10 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');
			 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_DriveRunningCcw" Id="{f5ab79c4-8a18-09db-1ff2-f40b299a41ee}">
      <Declaration><![CDATA[METHOD Test_DriveRunningCcw
VAR
	nCycleCount : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Starter is running counter clock wise with 0 speed');
fbStarter.stControlData.MotorCW := FALSE;
fbStarter.stControlData.MotorCCW := TRUE;
fbStarter.stControlData.BrakeActuation := TRUE;

fbStarter.stConfig.fVelocity := 0;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fExpectedReal := 0;
bExpectedBool := FALSE;

FOR nCycleCount := 0 TO 100 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');	
			 
fExpectedDataOut := fbStarter.GetLinkControlData();			 
AssertEquals(Expected := fExpectedReal,
             Actual := fExpectedDataOut,
             Message := 'DataOut is not correct');	
			 		 
TEST_FINISHED();
//######################################################
TEST('Starter is running counter clock wise with -100 speed');
fbStarter.stControlData.MotorCW := FALSE;
fbStarter.stControlData.MotorCCW := TRUE;
fbStarter.stControlData.BrakeActuation := TRUE;

fbStarter.stConfig.fVelocity := 10;
fbStarter.stConfig.fAcceleration := 1000;
fbStarter.stConfig.fDeceleration := 1000;

fExpectedReal := -10;
bExpectedBool := TRUE;

FOR nCycleCount := 0 TO 100 DO
    fbStarter();
END_FOR

fResultReal := fbStarter.fSpeed;
bResultBool := fbStarter.stStatusData.MotorON;

AssertEquals(Expected := fExpectedReal,
             Actual := fResultReal,
             Message := 'DataOut is not correct');	
			 
AssertEquals(Expected := bExpectedBool,
             Actual := bResultBool,
             Message := 'Status is not correct');
			 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
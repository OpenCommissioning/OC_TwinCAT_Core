<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_DS402" Id="{5b9ad0a5-818b-0ff0-0e1f-0653ba13c828}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_DS402 EXTENDS FB_LinkDataREAL 
VAR_INPUT
	bSTO 				: BOOL := TRUE;	
	stControlData 		: ST_DS402_6040h_ControlWord;
	nTargetValue		: DINT;	//[INC]
	{attribute 'unity-ui'}
	stConfig			: ST_DS402Config;	
END_VAR

VAR_OUTPUT
	stStatusData 		: ST_DS402_6041h_StatusWord;
	nPosition			: DINT; //[INC]	
	fPosition 			: REAL; //[unit]
	fVelocity 			: REAL; //[unit/s]
END_VAR

VAR		
	{attribute 'instance-path'} 
    {attribute 'noinit'} 
    sPath 				: STRING; 	
	
	fbStateMachine 		: FB_DS402FSM;	
	
	nControlLink		: BYTE; //Control BYTE to data link
	fTargetValue 		: REAL; //Target value to data link
	nStatusLink			: BYTE; //Status BYTE from data link
	fActualValue 		: REAL; //Actual value from data link	
	
	fEncoderNumDen 		: REAL;
	fEncoderDenNum 		: REAL;	
	fPositionLocal 		: REAL; //[unit]
	fVelocityLocal 		: REAL; //[unit/s]	
	
	pControlData		: POINTER TO BYTE; //Addr. Process Output (PO), 6 BYTES FROM FIELDBUS
	pStatusData			: POINTER TO BYTE; //Addr. Process Input (PI), 6 BYTES FROM FIELDBUS
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
InitRun();

GetControlData(stControlData, pControlData, stConfig.bSwapProcessData);
ControlLogic();
SetStatusData(stStatusData, pStatusData, stConfig.bSwapProcessData);


]]></ST>
    </Implementation>
    <Method Name="AssignAddress" Id="{27be7142-e129-0648-3fd3-aee7956ace40}">
      <Declaration><![CDATA[METHOD PUBLIC AssignAddress
VAR_INPUT
	ControlWord : ANY; //ControlWord from PLC [6 bytes]
	StatusWord : ANY; //StatusWord to PLC [6 bytes]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pControlData := ControlWord.pValue;
pStatusData := StatusWord.pValue;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="ControlLogic" Id="{7e0c513a-c095-0bee-207f-97fef8d8f3ac}">
      <Declaration><![CDATA[METHOD PRIVATE ControlLogic
VAR
	fTargetVelocitySign : REAL;
	fTargetVelocityFactor : REAL;
	fTargetVelocity : REAL;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nStatusLink := Status;
fActualValue := StatusData;

IF NOT bSTO THEN RETURN; END_IF

fbStateMachine.stControl := stControlData;
fbStateMachine();
stStatusData := fbStateMachine.stStatus;

IF (fbStateMachine._eState = E_DS402State.S4_OperationEnabled) THEN
	CASE stConfig.eControlMode OF
		E_ControlMode.Position: PositionMode();
		E_ControlMode.Speed: SpeedMode();	
	END_CASE
	
	fPosition := fPositionLocal * stConfig.fGearFactor + stConfig.fPositionOffset;
	fVelocity := fVelocityLocal * stConfig.fGearFactor; 
	
	IF stConfig.fEncoderModulo > 0.0 THEN
		fPosition := LREAL_TO_REAL(LMOD(fPosition, stConfig.fEncoderModulo));
	END_IF

	nPosition := REAL_TO_DINT(fPosition * fEncoderDenNum * stConfig.fEncoderOutputFactor);	
	
	CASE stConfig.eLinkControlMode OF
		E_ControlMode.Position: fTargetValue := fPosition * stConfig.fLinkOutputFactor;
		E_ControlMode.Speed: fTargetValue := fVelocity * stConfig.fLinkOutputFactor;	
	END_CASE
END_IF

Control := nControlLink;
ControlData := fTargetValue;





]]></ST>
      </Implementation>
    </Method>
    <Property Name="eState" Id="{eedf6177-819d-06b9-3bb8-a8b78d085ebc}">
      <Declaration><![CDATA[PROPERTY eState : E_DS402State]]></Declaration>
      <Get Name="Get" Id="{14c09d52-e77c-0799-37fe-ff3eafc25606}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eState := fbStateMachine.eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetControlData" Id="{a4bb5341-b8ec-0a1d-0c8c-d9fcf48a00bc}">
      <Declaration><![CDATA[METHOD PRIVATE GetControlData
VAR_INPUT
	stControl 		: REFERENCE TO ST_DS402_6040h_ControlWord;
	pAddr			: ULINT; //PO adress
	bSwap 			: BOOL; //Swap BE_TO_HOST
END_VAR

VAR
	nControlWord 	: WORD;
	nValue 			: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pControlData = 0 THEN RETURN; END_IF

MEMCPY(ADR(stControl), pAddr, 2);

IF stConfig.bSwapProcessData THEN
	MEMCPY(ADR(nControlWord), pAddr, 2);
	nControlWord := BE16_TO_HOST(nControlWord);
	MEMCPY(ADR(stControl), ADR(nControlWord), 2);	
	MEMCPY(ADR(nTargetValue), pAddr + 2, 4);
	nTargetValue := DWORD_TO_DINT(HOST_TO_BE32(DINT_TO_DWORD(nTargetValue)));
ELSE
	MEMCPY(ADR(stControl), pAddr, 2);
	MEMCPY(ADR(nTargetValue), pAddr + 2, 4);	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRun" Id="{d049ee6c-9bd5-0b70-2014-900b403d611d}">
      <Declaration><![CDATA[METHOD PRIVATE InitRun
VAR_INST
	bInitRun : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitRun THEN RETURN; END_IF
bInitRun := FALSE;

fEncoderNumDen := ABS(stConfig.fEncoderNumerator) / ABS(stConfig.fEncoderDenominator);
fEncoderDenNum := ABS(stConfig.fEncoderDenominator) / ABS(stConfig.fEncoderNumerator);

IF pControlData = 0 OR pStatusData = 0 THEN
	ADSLOGSTR(ADSLOG_MSGTYPE_WARN, '%s', CONCAT(sPath, ' PLC IO is not assigned!'));	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PositionMode" Id="{09221418-42c7-0af1-2c3b-3341883a6d22}">
      <Declaration><![CDATA[METHOD PRIVATE PositionMode : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[fVelocityLocal := 0;
fPositionLocal := DINT_TO_REAL(nTargetValue) * fEncoderNumDen;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStatusData" Id="{24f065b5-0c85-0a4a-23e4-971185e8624f}">
      <Declaration><![CDATA[METHOD PRIVATE SetStatusData
VAR_INPUT
	stStatus 		: ST_DS402_6041h_StatusWord;
	pAddr			: ULINT;
	bSwap 			: BOOL;
END_VAR

VAR
	nStatusWord 	: WORD;
	nValue 			: DINT;
	nTempWord: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pAddr <= 0 THEN RETURN; END_IF

IF stConfig.bSwapProcessData THEN
	MEMCPY(ADR(nStatusWord), ADR(stStatus), 2);
	nStatusWord := BE16_TO_HOST(nStatusWord);
	MEMCPY(pAddr, ADR(nStatusWord), 2);

	nValue := DWORD_TO_DINT(HOST_TO_BE32(DINT_TO_DWORD(nPosition)));
	MEMCPY(pAddr + 2, ADR(nValue), 4);
ELSE
	MEMCPY(pAddr, ADR(stStatus), 2);
	MEMCPY(pAddr + 2, ADR(nPosition), 4);
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="SpeedMode" Id="{6bb87177-a691-03be-389c-872b4e371deb}">
      <Declaration><![CDATA[METHOD PRIVATE SpeedMode : BOOL
VAR
	fTargetVelocitySign : REAL;
	fTargetVelocityFactor : REAL;
	fTargetVelocity : REAL;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fTargetVelocity := DINT_TO_REAL(nTargetValue);
fTargetVelocityFactor := F_Norm(0, 80000, ABS(fTargetVelocity));
fVelocityLocal := stConfig.fReferenceVelocity * fTargetVelocityFactor * F_Sign(fTargetVelocity);
fPositionLocal := fPositionLocal +(fVelocityLocal * GVL_Core.fbSystem.fDeltaTime);

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SimMovitrac" Id="{bc44949e-cd89-0258-2d92-a97177d5abc9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_SimMovitrac EXTENDS FB_LinkDataReal
VAR_INPUT
	bSTO					: BOOL := TRUE;
	stControlData			: ST_SimMovitracControlData;
	stConfig				: ST_SimMovitracConfig;	
END_VAR

VAR_OUTPUT
	stStatusData			: ST_SimMovitracStatusData;
	fVelocity 				: REAL;	
END_VAR

VAR
    {attribute 'instance-path'} 
    {attribute 'noinit'} 
    sPath 					: STRING; 
	                		
	fbSimMovitracFSM		: FB_SimMovitracFSM;
	fbDriveControl			: FB_DriveControl;
	                		
	pControlData			: POINTER TO BYTE; //Addr. Process Output (PO), 6 BYTES FROM FIELDBUS
	pStatusData				: POINTER TO BYTE; //Addr. Process Input (PI), 6 BYTES TO FIELDBUS
END_VAR

VAR CONSTANT
	MAX_VALUE_UINT			: UINT := 65535;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
InitRun();

GetControlData(stControlData, pControlData, stConfig.bSwapProcessData);
ControlLogic();
SetStatusData(stStatusData, pStatusData, stConfig.bSwapProcessData);]]></ST>
    </Implementation>
    <Method Name="ControlLogic" Id="{7c14d496-60d6-0dde-13aa-59bc02ebc84f}">
      <Declaration><![CDATA[METHOD INTERNAL ControlLogic
VAR
	fDecCoastStop	: REAL;
	fDecRapidStop	: REAL;
	fProcessRamp	: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Limit values *)
	stConfig.fDecCoastStop 	:= LIMIT(1, stConfig.fDecCoastStop, MAX_VALUE_UINT);
	stConfig.fDecRapidStop 	:= LIMIT(1, stConfig.fDecRapidStop, MAX_VALUE_UINT);
	stControlData.nSetpointSpeed 	:= LIMIT(-REAL_TO_INT(stConfig.fReferenceVelocity), stControlData.nSetpointSpeed, REAL_TO_INT(stConfig.fReferenceVelocity));
	stControlData.nRamp 			:= LIMIT(1, stControlData.nRamp, MAX_VALUE_UINT);

(* Calculate acceleration / deceleration targets *)
	fDecCoastStop := stConfig.fReferenceVelocity * 1000 / stConfig.fDecCoastStop;
	fDecRapidStop := stConfig.fReferenceVelocity * 1000 / stConfig.fDecRapidStop;
	fProcessRamp := stConfig.fReferenceVelocity * 1000 / UINT_TO_REAL(stControlData.nRamp);
	
(* Base state of the controller *)
	fbSimMovitracFSM(
		bControllerInhibit:= stControlData.bControllerInhibit, 
		bRapidStop:= stControlData.bRapidStop, 
		bStop:= stControlData.bStop, 
		bHoldControl:= FALSE);
	
(* Safe Torque Off *)
IF NOT bSTO THEN
	fbDriveControl.Stop(fDecRapidStop);
ELSE
	
	(* Evaluate base state *)
	CASE fbSimMovitracFSM.eState OF
	(* Coast stop *)
		E_SimMovitracState.ControllerInhibit:
			fbDriveControl.Stop(fDecCoastStop);			
	(* Rapid stop *)
		E_SimMovitracState.RapidStop:
			fbDriveControl.Stop(fDecRapidStop);		
	(* Ramp stop *)
		E_SimMovitracState.Halt:
			fbDriveControl.Stop(fProcessRamp);		
	(* Enable *)		
		E_SimMovitracState.Enable:
			fbDriveControl.MoveVelocity(stControlData.nSetpointSpeed * 0.2, fProcessRamp, fProcessRamp);
	END_CASE
END_IF

(* Velocity value *)
	ControlData := fVelocity := fbDriveControl.fVelocity * stConfig.fGearFactor;
	
(* Status Word *)
	stStatusData.bEnableOutputStage		:= fbDriveControl.fVelocity <> 0;
	stStatusData.bInverterReady   		:= TRUE;
	stStatusData.bPoDataEnable    		:= FALSE;
	stStatusData.bReserved3       		:= FALSE;
	stStatusData.bReserved4       		:= FALSE;
	stStatusData.bError           		:= FALSE;
	stStatusData.bReserved6       		:= FALSE;
	stStatusData.bReserved7       		:= FALSE;
	stStatusData.nStatus				:= 0;

(* Status values *)
	stStatusData.nActSpeed				:= REAL_TO_INT(fbDriveControl.fVelocity / 0.2);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStatusData" Id="{802684cd-1cec-0928-2001-9cfc3a3c3f5f}">
      <Declaration><![CDATA[METHOD INTERNAL SetStatusData : BOOL
VAR_INPUT
	stStatus 		: ST_SimMovitracStatusData;
	pAddr			: ULINT;
	bSwap 			: BOOL;
END_VAR

VAR
	nStatusIndex	: DWORD;
	nSpeedActIndex	: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pAddr <= 0 THEN RETURN; END_IF

nStatusIndex := stConfig.nStatusAssign;
nSpeedActIndex := stConfig.nSpeedActAssign;

IF stConfig.bSwapProcessData THEN
	MEMCPY(pAddr + nStatusIndex + 1, ADR(stStatusData), 1);
	MEMCPY(pAddr + nStatusIndex, ADR(stStatusData.nStatus), 1);
	MEMCPY(pAddr + nSpeedActIndex + 1, ADR(stStatusData.nActSpeed), 1);
	MEMCPY(pAddr + nSpeedActIndex, ADR(stStatusData.nActSpeed) + 1, 1);
ELSE	
	MEMCPY(pAddr + nStatusIndex, ADR(stStatusData), 2);
	MEMCPY(pAddr + nSpeedActIndex, ADR(stStatusData.nActSpeed), 2);	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetControlData" Id="{890ad62b-0239-0ed0-3195-adfe806bf33c}">
      <Declaration><![CDATA[METHOD INTERNAL GetControlData
VAR_INPUT
	stControl 		: REFERENCE TO ST_SimMovitracControlData;
	pAddr			: ULINT; //PO adress
	bSwap 			: BOOL; //Swap BE_TO_HOST
END_VAR

VAR
	nCtrlIndex		: DWORD;
	nSpeedIndex		: DWORD;
	nRampIndex		: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pAddr <= 0 THEN RETURN; END_IF

nCtrlIndex := stConfig.nCtrlAssign;
nSpeedIndex := stConfig.nSpeedAssign;
nRampIndex := stConfig.nRampAssign;
	
IF stConfig.bSwapProcessData THEN
	MEMCPY(ADR(stControlData) + 1, pAddr + nCtrlIndex, 1);
	MEMCPY(ADR(stControlData), pAddr + nCtrlIndex + 1, 1);
	MEMCPY(ADR(stControlData.nSetpointSpeed) + 1, pAddr + nSpeedIndex, 1);
	MEMCPY(ADR(stControlData.nSetpointSpeed), pAddr + nSpeedIndex + 1, 1);
	
	IF nRampIndex > E_SimMovitracAssign.ProcessData3 THEN
		MEMCPY(ADR(stControlData.nRamp) + 1, pAddr + nRampIndex, 2);
		MEMCPY(ADR(stControlData.nRamp), pAddr + nRampIndex + 1, 2);
	ELSE
		stControlData.nRamp := REAL_TO_UINT(stConfig.fProcessRamp);
	END_IF
ELSE
	MEMCPY(ADR(stControlData), pControlData + nCtrlIndex, 2);
	MEMCPY(ADR(stControlData.nSetpointSpeed), pAddr + nSpeedIndex, 2);
	
	IF nRampIndex > E_SimMovitracAssign.ProcessData3 THEN
		memcpy(ADR(stControlData.nRamp), pAddr + nRampIndex, 2);
	ELSE
		stControlData.nRamp := REAL_TO_UINT(stConfig.fProcessRamp);
	END_IF			
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRun" Id="{9373c62b-2157-000f-2c86-61da32845504}">
      <Declaration><![CDATA[METHOD INTERNAL InitRun : BOOL
VAR_INST
	bInitRun : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitRun THEN RETURN; END_IF
bInitRun := FALSE;

IF pControlData = 0 OR pStatusData = 0 THEN
	ADSLOGSTR(ADSLOG_MSGTYPE_WARN, CONCAT(sPath, ': %s'), 'Plc address not set.');
END_IF

fbDriveControl.fPositionLimitMin := 0;
fbDriveControl.fPositionLimitMax := 0;
fbDriveControl.fAccMax := 0;
fbDriveControl.fTolerance := 0.1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssignProcessData" Id="{f163243d-cf44-0259-36a0-8f0c80ca02da}">
      <Declaration><![CDATA[(*Assign Process Data Objects to device*)
METHOD PUBLIC AssignProcessData : BOOL
VAR_INPUT
	aControlData 		: ANY; //Addr. Process Output (PO), 6 BYTES FROM FIELDBUS
	aStatusData 		: ANY; //Addr. Process Input (PI), 6 BYTES TO FIELDBUS
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.pControlData := aControlData.pValue;
THIS^.pStatusData := aStatusData.pValue;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
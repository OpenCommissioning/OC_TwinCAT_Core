<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Starter" Id="{b36bc906-05c1-017f-3163-aedc9969c09c}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_Starter EXTENDS FB_LinkDataREAL
VAR_INPUT
	stControlData		: ST_StarterControlData;
	stConfig			: ST_StarterConfig;	
END_VAR

VAR_OUTPUT
	stStatusData		: ST_StarterStatusData;	
	fSpeed				: REAL; // Units [RPM]
END_VAR

VAR
	{attribute 'instance-path'}
	{attribute 'noinit'}
	sPath				: STRING;	
                    	
	fbDriveControl		: FB_DriveControl;
	bMoveActive			: BOOL;
	
	pControlData		: POINTER TO BYTE; //Addr. Process Output (PO), 2 BYTES FROM FIELDBUS
	pStatusData			: POINTER TO BYTE; //Addr. Process Input (PI), 2 BYTES FROM FIELDBUS
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
InitRun();

GetControlData(stControlData, pControlData, stConfig.bSwapProcessData);
ControlLogic();
SetStatusData(stStatusData, pStatusData, stConfig.bSwapProcessData);]]></ST>
    </Implementation>
    <Method Name="GetControlData" Id="{087e615f-8b4b-02b0-1008-801a6e63bf94}">
      <Declaration><![CDATA[METHOD INTERNAL GetControlData
VAR_INPUT
	stControl 		: REFERENCE TO ST_StarterControlData;
	pAddr			: ULINT; //PO adress
	bSwap 			: BOOL; //Swap BE_TO_HOST
END_VAR

VAR	
	nControlWord 	: WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pAddr <= 0 THEN RETURN; END_IF

IF bSwap THEN 
	MEMCPY(ADR(nControlWord), pAddr, 2);
	nControlWord := BE16_TO_HOST(nControlWord);
	MEMCPY(ADR(stControl), ADR(nControlWord), 2);
ELSE
	MEMCPY(ADR(stControl), pAddr, 2);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ControlLogic" Id="{25039d9d-55d4-0cad-2de4-fde3a4d8af2f}">
      <Declaration><![CDATA[METHOD INTERNAL ControlLogic
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Set parameter *)	
	bMoveActive := FALSE;
	
	IF (stControlData.MotorCW AND NOT stControlData.MotorCCW AND stControlData.BrakeActuation AND NOT stStatusData.GroupFault) THEN
		fbDriveControl.MoveVelocity(
			(stConfig.fVelocity),
			(stConfig.fAcceleration),
			(stConfig.fDeceleration));
		bMoveActive := TRUE;
	END_IF
	
	IF (stControlData.MotorCCW AND NOT stControlData.MotorCW AND stControlData.BrakeActuation AND NOT stStatusData.GroupFault) THEN
		fbDriveControl.MoveVelocity(
			(-stConfig.fVelocity),
			(stConfig.fAcceleration),
			(stConfig.fDeceleration));
		bMoveActive := TRUE;
	END_IF
	
	IF NOT bMoveActive OR stStatusData.GroupFault THEN
		fbDriveControl.Stop(stConfig.fDeceleration);
	END_IF

ControlData := fSpeed := fbDriveControl.fVelocity;
	
stStatusData.Ready 				:= TRUE;
stStatusData.MotorON 			:= NOT F_Compare(fbDriveControl.fVelocity, 0, 0.001); 
stStatusData.GroupFault 		:= FALSE;
stStatusData.GroupWarn 			:= FALSE;
stStatusData.Input1 			:= FALSE;
stStatusData.Input2 			:= FALSE;
stStatusData.Input3 			:= FALSE;
stStatusData.Input4 			:= FALSE;
stStatusData.MotorCurrent0 		:= FALSE;
stStatusData.MotorCurrent1 		:= FALSE;
stStatusData.MotorCurrent2 		:= FALSE;
stStatusData.MotorCurrent3 		:= FALSE;
stStatusData.MotorCurrent4 		:= FALSE;
stStatusData.MotorCurrent5 		:= FALSE;
stStatusData.ManualLocalMode	:= FALSE;
stStatusData.RampOperation 		:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStatusData" Id="{4bab9901-ef32-05cc-08f1-cf9dc50f20d8}">
      <Declaration><![CDATA[METHOD INTERNAL SetStatusData
VAR_INPUT
	stStatus 		: ST_StarterStatusData;
	pAddr			: ULINT;
	bSwap 			: BOOL;
END_VAR

VAR
	nStatusWord 	: WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pAddr <= 0 THEN RETURN; END_IF

IF bSwap THEN 
	MEMCPY(ADR(nStatusWord), ADR(stStatus), 2);
	nStatusWord := HOST_TO_BE16(nStatusWord);
	MEMCPY(pAddr, ADR(nStatusWord), 2);
ELSE
	MEMCPY(pAddr, ADR(stStatus), 2);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRun" Id="{661bf876-cf37-0fed-2f08-440d1b882723}">
      <Declaration><![CDATA[METHOD INTERNAL InitRun
VAR_INST
	bInitRun : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitRun THEN RETURN; END_IF
bInitRun := FALSE;

IF pControlData = 0 OR pStatusData = 0 THEN
	ADSLOGSTR(ADSLOG_MSGTYPE_WARN, CONCAT(sPath, ': %s'), 'Plc address not set.');
END_IF

fbDriveControl.fPositionLimitMin := 0;
fbDriveControl.fPositionLimitMax := 0;
fbDriveControl.fAccMax := 0;
fbDriveControl.fTolerance := 0.1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssignProcessData" Id="{cb0e0940-c35f-0529-02ff-f1934608b5b3}">
      <Declaration><![CDATA[(*Assign Process Data Objects to device*)
METHOD PUBLIC AssignProcessData : BOOL
VAR_INPUT
	aControlData 		: ANY; //Addr. Process Output (PO), 2 BYTES FROM FIELDBUS
	aStatusData 		: ANY; //Addr. Process Input (PI), 2 BYTES TO FIELDBUS
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.pControlData := aControlData.pValue;
THIS^.pStatusData := aStatusData.pValue;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
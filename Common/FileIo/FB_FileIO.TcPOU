<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_FileIO" Id="{9bd0ee4a-382c-097c-0148-97ed6cb4f83e}" SpecialFunc="None">
    <Declaration><![CDATA[(*
	File read/write operations.
*)
FUNCTION_BLOCK FB_FileIO
VAR	
	_sNetId				: STRING;
	_fbFileOpen 		: FB_FileOpen;
	_fbFileWrite 		: FB_FileWrite;
	_fbFileRead 		: FB_FileRead;
	_fbFileClose 		: FB_FileClose;	
	_fbCreateDir		: FB_CreateDir;
	_nHFile 			: UINT := 0;
	_eReadState 		: E_FileIoState := READY;
	_eWriteState 		: E_FileIoState := READY;
	_nBytesReadResult	: UDINT;
	_nErrorIdResult		: UDINT;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="nBytesRead" Id="{77d13791-0365-08c4-3bd9-096e691e978b}">
      <Declaration><![CDATA[(*
	Number of bytes from last read (maps to _nBytesReadResult)
*)
PROPERTY PUBLIC nBytesRead : UDINT]]></Declaration>
      <Get Name="Get" Id="{f25b037a-82a3-01f6-3927-ed3e9b0a6234}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[nBytesRead := _nBytesReadResult;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{dd598571-c71e-048c-391c-82a7be85eeae}">
        <Declaration><![CDATA[PRIVATE
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nBytesReadResult := nBytesRead;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="nErrorId" Id="{cfef08be-643c-0e12-22fb-90630518dad7}">
      <Declaration><![CDATA[(*
	Last error ID (maps to _nErrorIdResult)
*)
PROPERTY PUBLIC nErrorId : uDINT]]></Declaration>
      <Get Name="Get" Id="{7b8c5cc6-591a-0ab8-1bf5-f9fe8b7ca6c1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nErrorId := _nErrorIdResult;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8758247d-9ed6-0698-25af-4a957bc27e4e}">
        <Declaration><![CDATA[PRIVATE
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nErrorIdResult := nErrorId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Read" Id="{88360398-0c6e-0b7e-0e2d-578c6012dec3}">
      <Declaration><![CDATA[(*
	Read data from file
	sFileName (T_MaxString): Name/path of the file to read.
	pData (PVOID): Pointer to the data buffer for storing the file contents.
	nLength (UDINT): Number of bytes to read.
*)
METHOD PUBLIC Read : BOOL
VAR_INPUT
	sFileName	: T_MaxString;	//Name/path of the file to read
	pData		: PVOID;	//ointer to the data buffer for storing the file contents
	nLength		: UDINT; //Number of bytes to read
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Read := FALSE;
CASE _eReadState OF
	E_FileIoState.READY:
		_fbFileOpen(sNetId := _sNetId, bExecute := FALSE);
		_fbFileRead(sNetId := _sNetId, bExecute := FALSE);
		_fbFileClose(sNetId := _sNetId, bExecute := FALSE);
		_eReadState := E_FileIoState.OPEN;
		
	E_FileIoState.OPEN:
		nErrorId := 0;
		nBytesRead := 0;
		IF _nHFile = 0 THEN
			_fbFileOpen.sPathName := sFileName;
			_fbFileOpen.nMode := FOPEN_MODEREAD;
			_fbFileOpen.ePath := PATH_GENERIC;
			_fbFileOpen(bExecute := TRUE);
		END_IF
		IF _fbFileOpen.hFile <> 0 AND NOT _fbFileOpen.bBusy AND NOT _fbFileOpen.bError THEN
			_nHFile := _fbFileOpen.hFile;
			_fbFileOpen(bExecute := FALSE);			
			_fbFileRead.hFile := _nHFile;
			_fbFileRead.cbReadLen := nLength;
			_fbFileRead.pReadBuff := pData;
			_eReadState := E_FileIoState.READ;
		END_IF
		IF _fbFileOpen.bError THEN
			_fbFileOpen(bExecute := FALSE);
			nErrorId := _fbFileOpen.nErrId;
			_eReadState := E_FileIoState.CREATE;
		END_IF
		
	E_FileIoState.CREATE:
		IF THIS^.Write(sFileName, pData, nLength) THEN
			IF nErrorId = 0 THEN
				_eReadState := E_FileIoState.OPEN;
			ELSE
				_eReadState := E_FileIoState.ERROR;
			END_IF
		END_IF
				
	E_FileIoState.READ:
		_fbFileRead(bExecute := TRUE);
		IF NOT _fbFileRead.bBusy AND NOT _fbFileRead.bError THEN
			nBytesRead := _fbFileRead.cbRead;
			_fbFileRead(bExecute := FALSE);
			_eReadState := E_FileIoState.CLOSE;
		END_IF
		IF _fbFileRead.bError THEN
			nErrorId := _fbFileRead.nErrId;
			_eReadState := E_FileIoState.ERROR;
		END_IF
		
	E_FileIoState.CLOSE:
		IF _nHFile <> 0 THEN
			_fbFileClose(hFile := _nHFile, bExecute := TRUE);
		END_IF
		IF NOT _fbFileClose.bBusy THEN
			_fbFileClose(bExecute := FALSE);
			_nHFile := 0;
			_eReadState := E_FileIoState.READY;
			Read := TRUE;
		END_IF
				
	E_FileIoState.ERROR:
		F_LogError(CONCAT('Error reading/writing file in ', CONCAT(_sNetId, CONCAT(' - ', sFileName))));
		_eReadState := E_FileIoState.CLOSE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="sNetId" Id="{e5323cd2-2532-0a2a-0b62-cd12af0fc498}">
      <Declaration><![CDATA[(*
	Network identifier (maps to _sNetId)
*)
PROPERTY sNetId : STRING]]></Declaration>
      <Get Name="Get" Id="{b6ab6318-d9d7-062e-0bb5-bd2818d9d253}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sNetId := _sNetId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f44aea4-48fe-01ec-2bff-fb9bdaa8d292}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sNetId := sNetId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Write" Id="{68c59710-200f-05a4-0ce2-66f5a6e5ee04}">
      <Declaration><![CDATA[(*
	Write data to file
	sFileName (T_MaxString): Name/path of the file.
	pData (PVOID): Pointer to the content data buffer.
	nLength (UDINT): Number of bytes to write.
*)
METHOD PUBLIC Write : BOOL
VAR_INPUT
	sFileName	: T_MaxString;	//Name/path of the file
	pData 		: PVOID;	//Pointer to the content data buffer
	nLength 	: UDINT;	//Number of bytes to write
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Write := FALSE;
CASE _eWriteState OF
	E_FileIoState.READY:
		_fbFileOpen(sNetId := _sNetId, bExecute := FALSE);
		_fbFileWrite(sNetId := _sNetId, bExecute := FALSE);
		_fbFileClose(sNetId := _sNetId, bExecute := FALSE);
		_fbCreateDir(sNetId := _sNetId, bExecute := FALSE);
		_eWriteState := E_FileIoState.OPEN;
		
	E_FileIoState.OPEN:
		nErrorId := 0;
		IF _nHFile = 0 THEN
			_fbFileOpen.sPathName := sFileName;
			_fbFileOpen.nMode := FOPEN_MODEWRITE;
			_fbFileOpen.ePath := PATH_GENERIC;
			_fbFileOpen(bExecute := TRUE);
		END_IF
		IF _fbFileOpen.hFile <> 0 AND NOT _fbFileOpen.bBusy AND NOT _fbFileOpen.bError THEN
			_nHFile := _fbFileOpen.hFile;
			_fbFileOpen(bExecute := FALSE);					
			_fbFileWrite.hFile := _nHFile;
			_fbFileWrite.cbWriteLen := nLength;
			_fbFileWrite.pWriteBuff := pData;
			_eWriteState := E_FileIoState.WRITE;
		END_IF
		IF _fbFileOpen.bError THEN
			_fbFileOpen(bExecute := FALSE);
			nErrorId := _fbFileOpen.nErrId;
			_eWriteState := E_FileIoState.CREATE;			
		END_IF
		
	E_FileIoState.CREATE:
		_fbCreateDir.sPathName:= sFileName;
		_fbCreateDir.ePath:= PATH_GENERIC;
		_fbCreateDir(bExecute := TRUE);
		IF NOT _fbCreateDir.bBusy AND NOT _fbCreateDir.bError THEN
			nErrorId := 0;
			_fbCreateDir(bExecute := FALSE);
			_eWriteState := E_FileIoState.OPEN;
		END_IF
		IF _fbCreateDir.bError THEN
			nErrorId := _fbCreateDir.nErrId;
			_eWriteState := E_FileIoState.ERROR;			
		END_IF
				
	E_FileIoState.WRITE:
		_fbFileWrite(bExecute := TRUE);
		IF NOT _fbFileWrite.bBusy AND _fbFileWrite.cbWrite = nLength AND NOT _fbFileWrite.bError THEN
			_fbFileWrite(bExecute := FALSE);
			_eWriteState := E_FileIoState.CLOSE;
		END_IF
		IF _fbFileWrite.bError THEN
			nErrorId := _fbFileWrite.nErrId;
			_eWriteState := E_FileIoState.ERROR;
		END_IF
		
	E_FileIoState.CLOSE:
		IF  _nHFile <> 0 THEN
			_fbFileClose(hFile := _nHFile, bExecute := TRUE);
		END_IF
		IF NOT _fbFileClose.bBusy THEN
			_fbFileClose(bExecute := FALSE);
			_nHFile := 0;
			_eWriteState := E_FileIoState.READY;
			Write := TRUE;
		END_IF

	E_FileIoState.ERROR:
		F_LogError(CONCAT('Error reading/writing file in ', CONCAT(_sNetId, CONCAT(' - ', sFileName))));
		_eWriteState := E_FileIoState.CLOSE;	

END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
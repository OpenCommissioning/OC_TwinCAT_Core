<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RecordData_Test" Id="{c5016b1b-f5a6-0c06-2faf-4f51e27f0af5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RecordData_Test EXTENDS TcUnit.FB_TestSuite
VAR
	_fbAdsMessageHandler 	: FB_AdsMessageHandler;
	_fbRecordData 			: FB_RecordData(refAdsMessageHandler := _fbAdsMessageHandler);		
	_stAdsHandlerMessage 	: ST_AdsMessage;
	_stDeviceMessage 		: ST_AdsMessage;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestCasesCompare();
TestGetReadIndication();
TestGetWriteIndication();
TestSendReadResponse();
TestSendWriteResponse();
TestAutoResponseWriteMessage();
TestAutoResponseReadMessage();]]></ST>
    </Implementation>
    <Method Name="TestAutoResponseReadMessage" Id="{536c504e-947e-0d99-325f-99c4b7c76231}">
      <Declaration><![CDATA[METHOD TestAutoResponseReadMessage : REFERENCE TO FB_Test
VAR
	fbAdsRead				: ADSREAD := (NETID := '', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT);
	stAdsMessage			: REFERENCE TO ST_AdsMessage;
	nData					: BYTE;
	bResult 				: BOOL;
	bResultPort 			: T_AmsPort;
	nExpectedPort			: T_AmsPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Auto Response Ads Read Message');

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;

fbAdsRead(READ := FALSE);
fbAdsRead(	IDXGRP := _stAdsHandlerMessage.nIdxGrp, 
			IDXOFFS := _stAdsHandlerMessage.nIdxOffs, 
        	LEN := _stAdsHandlerMessage.nLength, 
			DESTADDR := ADR(nData), 
        	READ := TRUE);			

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;	
_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

_fbRecordData();		
_fbAdsMessageHandler();

bResult := _fbAdsMessageHandler.bIsAdsMessageReadValid;
AssertTrue(bResult, 'AdsMessageReadValid expected TRUE');

_fbRecordData();	
_fbAdsMessageHandler();
bResult := _fbAdsMessageHandler.bIsAdsMessageReadValid;
AssertFalse(bResult, 'AdsMessageReadValid expected FALSE');

nExpectedPort := 0;
bResultPort := _fbAdsMessageHandler.stAdsMessageRead.tPort;

AssertEquals(Expected := nExpectedPort,
	Actual := bResultPort,
	Message := 'tPort value is incorrect');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAutoResponseWriteMessage" Id="{42bc730d-ba8d-0a21-340e-cc693387755a}">
      <Declaration><![CDATA[METHOD TestAutoResponseWriteMessage : REFERENCE TO FB_Test
VAR
	fbAdsWrite				: ADSWRITE := (NETID := '', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT);
	stAdsMessage			: REFERENCE TO ST_AdsMessage;
	nData					: BYTE;
	bResult 				: BOOL;
	bResultPort 			: T_AmsPort;
	nExpectedPort			: T_AmsPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Auto Response Ads Write Message');

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;

fbAdsWrite(WRITE := FALSE);
fbAdsWrite(	IDXGRP := _stAdsHandlerMessage.nIdxGrp, 
			IDXOFFS := _stAdsHandlerMessage.nIdxOffs, 
           	LEN := _stAdsHandlerMessage.nLength, 
			SRCADDR := ADR(nData), 
           	WRITE := TRUE);			

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;	
_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

_fbRecordData();		
_fbAdsMessageHandler();

bResult := _fbAdsMessageHandler.bIsAdsMessageWriteValid;
AssertTrue(bResult, 'AdsMessageWriteValid expected TRUE');

_fbRecordData();	
_fbAdsMessageHandler();
bResult := _fbAdsMessageHandler.bIsAdsMessageWriteValid;
AssertFalse(bResult, 'AdsMessageWriteValid expected FALSE');

nExpectedPort := 0;
bResultPort := _fbAdsMessageHandler.stAdsMessageWrite.tPort;

AssertEquals(Expected := nExpectedPort,
	Actual := bResultPort,
	Message := 'tPort value is incorrect');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestCaseCompare" Id="{ab0245b7-fae5-0e40-163f-4feef5f6d736}">
      <Declaration><![CDATA[METHOD TestCaseCompare : REFERENCE TO FB_Test
VAR_INPUT
	sName 					: T_MaxString;
	stAdsHandlerMessage 	: ST_AdsMessage;
	stDeviceMessage 		: ST_AdsMessage;
	bExpected				: BOOL;
END_VAR

VAR
	bResult 				: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

bResult := _fbRecordData.DataValid(stDeviceMessage, stAdsHandlerMessage);

AssertEquals(Expected := bExpected,
	Actual := bResult,
	Message := 'Expected compare result is wrong');

IF bResult AND bExpected THEN
	bResult := stAdsHandlerMessage.tPort = 0;
	AssertTrue(bResult, 'tPort must be 0');
END_IF
	
	
TEST_FINISHED();	]]></ST>
      </Implementation>
    </Method>
    <Action Name="TestCasesCompare" Id="{a66f56b6-ad47-048e-0c48-f851d0ab85c5}">
      <Implementation>
        <ST><![CDATA[(*Test ADS Message compare*)
_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare TRUE 1', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210011;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare TRUE - InvokeID', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210011;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare TRUE - nIdxOffs', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210011;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 16#FFFFFFFF;
TestCaseCompare('Compare TRUE - nIdxOffs 16#FFFFFFFF', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#12340011;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210011;
_stDeviceMessage.nIdxGrp := 16#43210011;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare TRUE - nIdxGrp', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#12340011;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210011;
_stDeviceMessage.nIdxGrp := 0;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare TRUE - nIdxGrp 0', _stAdsHandlerMessage, _stDeviceMessage, TRUE);

_stAdsHandlerMessage.tPort := 0; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare FALSE - AdsHandler Port 0', _stAdsHandlerMessage, _stDeviceMessage, FALSE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340010;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210001;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare FALSE - InvokeID', _stAdsHandlerMessage, _stDeviceMessage, FALSE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#12340000;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210000;
_stDeviceMessage.nIdxGrp := 16#43210022;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare FALSE - nIdxGrp', _stAdsHandlerMessage, _stDeviceMessage, FALSE);

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 16#12340011;
_stAdsHandlerMessage.nIdxGrp := 16#12340000;
_stAdsHandlerMessage.nIdxOffs := 20;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 16#43210000;
_stDeviceMessage.nIdxGrp := 16#43210000;
_stDeviceMessage.nIdxOffs := 10;
TestCaseCompare('Compare FALSE - nIdxOffs', _stAdsHandlerMessage, _stDeviceMessage, FALSE);]]></ST>
      </Implementation>
    </Action>
    <Method Name="TestGetReadIndication" Id="{3fac2f4b-8c62-0cc9-0aba-9869cfc4d60e}">
      <Declaration><![CDATA[METHOD TestGetReadIndication : REFERENCE TO FB_Test
VAR	
	fbAdsRead				: ADSREAD := (NETID := '', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT);
	stAdsMessage			: REFERENCE TO ST_AdsMessage;
	nData					: BYTE;
	bResult 				: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Get Read Indication');

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;

fbAdsRead(READ := FALSE);
fbAdsRead(	IDXGRP := _stAdsHandlerMessage.nIdxGrp, 
			IDXOFFS := _stAdsHandlerMessage.nIdxOffs, 
        	LEN := _stAdsHandlerMessage.nLength, 
			DESTADDR := ADR(nData), 
        	READ := TRUE);			

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;			
_fbAdsMessageHandler();

_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

bResult := _fbRecordData.GetReadIndication(_stDeviceMessage);
stAdsMessage REF= _fbAdsMessageHandler.stAdsMessageRead;

AssertTrue(bResult, 'Result value is not correct');

bResult := stAdsMessage.tPort = 0;
AssertTrue(bResult, 'tPort must be 0');

TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestGetWriteIndication" Id="{a880761d-7b45-0545-3979-074b0ff1ce41}">
      <Declaration><![CDATA[METHOD TestGetWriteIndication : REFERENCE TO FB_Test
VAR	
	fbAdsWrite				: ADSWRITE := (NETID := '', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT);
	stAdsMessage			: REFERENCE TO ST_AdsMessage;
	nData					: BYTE;
	bResult 				: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Get Write Indication');

_stAdsHandlerMessage.tPort := 351; 
_stAdsHandlerMessage.nInvokeID := 500;
_stAdsHandlerMessage.nIdxGrp := 16#80000001;
_stAdsHandlerMessage.nIdxOffs := 10;
_stDeviceMessage.tPort := 351;
_stDeviceMessage.nInvokeID := 500;
_stDeviceMessage.nIdxGrp := 16#80000001;
_stDeviceMessage.nIdxOffs := 10;

fbAdsWrite(WRITE := FALSE);
fbAdsWrite(	IDXGRP := _stAdsHandlerMessage.nIdxGrp, 
			IDXOFFS := _stAdsHandlerMessage.nIdxOffs, 
           	LEN := _stAdsHandlerMessage.nLength, 
			SRCADDR := ADR(nData), 
           	WRITE := TRUE);			

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;			
_fbAdsMessageHandler();

_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

bResult := _fbRecordData.GetWriteIndication(_stDeviceMessage);
stAdsMessage REF= _fbAdsMessageHandler.stAdsMessageRead;

AssertTrue(bResult, 'Result value is not correct');

bResult := stAdsMessage.tPort = 0;
AssertTrue(bResult, 'tPort must be 0');

TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSendReadResponse" Id="{6deb9781-0e5a-0188-0355-e206d7bc95ea}">
      <Declaration><![CDATA[METHOD TestSendReadResponse : REFERENCE TO FB_Test
VAR
	stAdsMessage : ST_AdsMessage;
	hExpected : HRESULT;
	hRes : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Send Read Response');

stAdsMessage.tPort := 351;
stAdsMessage.nInvokeID := 500;
stAdsMessage.nIdxGrp := 16#80000001;
stAdsMessage.nIdxOffs := 10;

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;			
_fbAdsMessageHandler();

_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

hExpected := S_OK;
hRes := _fbRecordData.SendReadResponse(stAdsMessage);

AssertEquals(Expected := hExpected,
	Actual := hRes,
	Message := 'Expected result is not valid');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSendWriteResponse" Id="{6d9f50b4-a0c1-054a-2215-3cf6e0eae0fe}">
      <Declaration><![CDATA[METHOD TestSendWriteResponse : REFERENCE TO FB_Test
VAR
	stAdsMessage : ST_AdsMessage;
	hExpected : HRESULT;
	hRes : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Send Write Response');

stAdsMessage.tPort := 351;
stAdsMessage.nInvokeID := 500;
stAdsMessage.nIdxGrp := 16#80000001;
stAdsMessage.nIdxOffs := 10;

_fbAdsMessageHandler.bLog := TRUE;
_fbAdsMessageHandler.bVerbose := TRUE;			
_fbAdsMessageHandler();

_fbRecordData.eControllerType := E_ControllerType.PlcSimAdvanced;

hExpected := S_OK;
hRes := _fbRecordData.SendReadResponse(stAdsMessage);

AssertEquals(Expected := hExpected,
	Actual := hRes,
	Message := 'Expected result is not valid');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
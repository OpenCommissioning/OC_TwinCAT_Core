<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Heater_Test" Id="{c19343b8-4c8f-0b85-22eb-7515d80d4eee}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Heater_Test EXTENDS TcUnit.FB_TestSuite

]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestState();
TestLimits();
TestValueChange();

]]></ST>
    </Implementation>
    <Method Name="TestLimits" Id="{c0a16841-f0cc-0377-189a-6507f02ff1d9}">
      <Declaration><![CDATA[METHOD TestLimits : REFERENCE TO FB_Test
VAR
	fbHeater : FB_Heater();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Limit Min FALSE');
fbHeater.fHeatingSpeed := 0;
fbHeater.fCoolingSpeed := 0;
fbHeater.fLimitMin := 20;
fbHeater.fValue := 30;

fbHeater();

AssertFALSE(fbHeater.bIsLimitMin, 'State is not correct');	 
TEST_FINISHED();

TEST('Limit Min TRUE');
fbHeater.fHeatingSpeed := 0;
fbHeater.fCoolingSpeed := 0;
fbHeater.fLimitMin := 20;
fbHeater.fValue := 20;

fbHeater();

AssertTRUE(fbHeater.bIsLimitMin, 'State is not correct');	 
TEST_FINISHED();

TEST('Limit Max FALSE');
fbHeater.fHeatingSpeed := 0;
fbHeater.fCoolingSpeed := 0;
fbHeater.fLimitMax := 60;
fbHeater.fValue := 59.9999;

fbHeater();

AssertFALSE(fbHeater.bIsLimitMax, 'State is not correct');	 
TEST_FINISHED();

TEST('Limit Max TRUE');
fbHeater.fHeatingSpeed := 0;
fbHeater.fCoolingSpeed := 0;
fbHeater.fLimitMax := 60;
fbHeater.fValue := 60;

fbHeater();

AssertTRUE(fbHeater.bIsLimitMax, 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState" Id="{8d1acde8-65d3-052f-0c95-03469bf5ef25}">
      <Declaration><![CDATA[METHOD TestState : REFERENCE TO FB_Test
VAR
	fbHeater : FB_Heater();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('State Enable');
fbHeater.bEnable := TRUE;	
fbHeater();
AssertTRUE(fbHeater.bEnabled, 'State is not correct');	 
TEST_FINISHED();

TEST('State Disable');
fbHeater.bEnable := TRUE;	
fbHeater();
fbHeater.bEnable := FALSE;
fbHeater();	
AssertFALSE(fbHeater.bEnabled, 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueChange" Id="{d2fa0f18-dd3f-05f6-25a2-ea3bbfbf9d1f}">
      <Declaration><![CDATA[METHOD TestValueChange : REFERENCE TO FB_Test
VAR
	fbHeater : FB_Heater();
	fResult : REAL;	
	fExpected : REAL;
	bExpected : BOOL;
	fInitValue : REAL;
	nCycleCount : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Value Up Disable');

fInitValue := 30;

fbHeater.bEnable := FALSE;
fbHeater.fValue := fInitValue;
fbHeater.fHeatingSpeed := 10;
fbHeater.fCoolingSpeed := 0;

fbHeater();

fResult := fbHeater.fValue;
fExpected := fInitValue;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Result value is not correct');	
	 
TEST_FINISHED();


TEST('Value Up Enable');

fInitValue := 30;

fbHeater.bEnable := TRUE;
fbHeater.fValue := fInitValue;
fbHeater.fHeatingSpeed := 10;
fbHeater.fCoolingSpeed := 0;

fbHeater();

fResult := fbHeater.fValue;
fExpected := fInitValue + 10 * GVL_Core.fbSystem.fDeltaTime;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Result value is not correct');	
	 
TEST_FINISHED();


TEST('Value Down Disable');

fInitValue := 30;

fbHeater.bEnable := FALSE;
fbHeater.fValue := fInitValue;
fbHeater.fHeatingSpeed := 10;
fbHeater.fCoolingSpeed := 0;

fbHeater();

fResult := fbHeater.fValue;
fExpected := fInitValue;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Result value is not correct');	
	 
TEST_FINISHED();


TEST('Value Down Enable');

fInitValue := 30;

fbHeater.bEnable := TRUE;
fbHeater.fValue := fInitValue;
fbHeater.fHeatingSpeed := 20;
fbHeater.fCoolingSpeed := 30;

fbHeater();

fResult := fbHeater.fValue;
fExpected := fInitValue - 10 * GVL_Core.fbSystem.fDeltaTime;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Result value is not correct');	
	 
TEST_FINISHED();

TEST('Value Cooling');

fInitValue := 30;

fbHeater.bEnable := FALSE;
fbHeater.fValue := fInitValue;
fbHeater.fHeatingSpeed := 0;
fbHeater.fCoolingSpeed := 10;

fbHeater();

fResult := fbHeater.fValue;
fExpected := fInitValue - 10 * GVL_Core.fbSystem.fDeltaTime;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Result value is not correct');	
	 
TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
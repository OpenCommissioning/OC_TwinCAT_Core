<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_DS402FSM_Test" Id="{95bbf8ac-3d06-0699-0739-299e3bee06db}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DS402FSM_Test EXTENDS TcUnit.FB_TestSuite

]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestState_S0();
TestState_S1();
TestState_S2();
TestState_S3();
TestState_S4();
TestState_S5();
TestState_S6();
TestState_S7();
TestEnableSequence();]]></ST>
    </Implementation>
    <Method Name="GetDisableCommand" Id="{3d1e7984-ef1f-0947-1dda-8469fd286e25}">
      <Declaration><![CDATA[METHOD GetDisableCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetDisableCommand.b0_SwitchOn := TRUE;
GetDisableCommand.b1_EnableVoltage := TRUE;
GetDisableCommand.b2_QuickStop := TRUE;
GetDisableCommand.b3_EnableOperation := FALSE;
GetDisableCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetDisableVoltageCommand" Id="{59543954-c0ba-0ff9-3d22-c526709275a7}">
      <Declaration><![CDATA[METHOD GetDisableVoltageCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetDisableVoltageCommand.b1_EnableVoltage := FALSE;
GetDisableVoltageCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnableCommand" Id="{9f87f2fe-b7e7-0fb5-14c9-ab9c1c23aea6}">
      <Declaration><![CDATA[METHOD GetEnableCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetEnableCommand.b0_SwitchOn := TRUE;
GetEnableCommand.b1_EnableVoltage := TRUE;
GetEnableCommand.b2_QuickStop := TRUE;
GetEnableCommand.b3_EnableOperation := TRUE;
GetEnableCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetQuickStopCommand" Id="{297eeb22-f5b8-0a3f-1768-f86925172ffa}">
      <Declaration><![CDATA[METHOD GetQuickStopCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetQuickStopCommand.b2_QuickStop := FALSE;
GetQuickStopCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetShotdownCommand" Id="{0ff76ed3-b9f8-07bb-1a12-674855c9b239}">
      <Declaration><![CDATA[METHOD GetShotdownCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetShotdownCommand.b0_SwitchOn := FALSE;
GetShotdownCommand.b1_EnableVoltage := TRUE;
GetShotdownCommand.b2_QuickStop := TRUE;
GetShotdownCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSwitchOnCommand" Id="{0f2294dd-70df-0bc0-303b-acbf2a88fbd5}">
      <Declaration><![CDATA[METHOD GetSwitchOnCommand : ST_DS402_6040h_ControlWord

]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetSwitchOnCommand.b0_SwitchOn := TRUE;
GetSwitchOnCommand.b1_EnableVoltage := TRUE;
GetSwitchOnCommand.b2_QuickStop := TRUE;
GetSwitchOnCommand.b7_FaultReset := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnableSequence" Id="{4971ef00-8df3-0e78-363a-9f1e260b5025}">
      <Declaration><![CDATA[METHOD TestEnableSequence : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Enable S1');

fbDS402();
nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Enable S2');
fbDS402.stControl.b1_EnableVoltage := TRUE;
fbDS402.stControl.b2_QuickStop := TRUE;

fbDS402();
nExpectedState := E_DS402State.S2_ReadyToSwitchOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Enable S3');
fbDS402.stControl.b0_SwitchOn := TRUE;

fbDS402();
nExpectedState := E_DS402State.S3_SwitchedOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Enable S4');
fbDS402.stControl.b3_EnableOperation := TRUE;

fbDS402();
nExpectedState := E_DS402State.S4_OperationEnabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Disable S4');
fbDS402.stControl.b3_EnableOperation := FALSE;

fbDS402();
nExpectedState := E_DS402State.S3_SwitchedOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Disable S3');
fbDS402.stControl.b0_SwitchOn := FALSE;

fbDS402();
nExpectedState := E_DS402State.S2_ReadyToSwitchOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Disable S2');
fbDS402.stControl.b1_EnableVoltage := FALSE;
fbDS402.stControl.b2_QuickStop := FALSE;

fbDS402();
nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S0" Id="{e392cbd2-2a39-0b87-0b1d-6c088f9d1005}">
      <Declaration><![CDATA[METHOD TestState_S0 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S0');
fbDS402.eState := E_DS402State.S0_NotReadyToSwitchOn;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= FALSE;
stExpectedStatus.b1_SwitchedOn 				:= FALSE;
stExpectedStatus.b2_OperationEnabled		:= FALSE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b4_VoltageEnabled			:= FALSE;
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01011111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S0>S1');
fbDS402.eState := E_DS402State.S0_NotReadyToSwitchOn;
fbDS402();
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;


AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S1" Id="{51a32f89-5669-0e48-24b0-64cb55734ed8}">
      <Declaration><![CDATA[METHOD TestState_S1 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S1');
fbDS402.eState := E_DS402State.S1_SwitchOnDisabled;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= FALSE;
stExpectedStatus.b1_SwitchedOn 				:= FALSE;
stExpectedStatus.b2_OperationEnabled		:= FALSE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b4_VoltageEnabled			:= FALSE;
stExpectedStatus.b6_SwitchOnDisabled 		:= TRUE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01011111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S1>S2');
fbDS402.eState := E_DS402State.S1_SwitchOnDisabled;
fbDS402.stControl := GetShotdownCommand();
fbDS402();

nExpectedState := E_DS402State.S2_ReadyToSwitchOn;
nActualState := fbDS402.eState;


AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S2" Id="{1ac8b6ec-67ef-02ba-1aa9-bcd6beae5df1}">
      <Declaration><![CDATA[METHOD TestState_S2 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S2');
fbDS402.eState := E_DS402State.S2_ReadyToSwitchOn;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= TRUE;
stExpectedStatus.b1_SwitchedOn 				:= FALSE;
stExpectedStatus.b2_OperationEnabled		:= FALSE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b4_VoltageEnabled			:= TRUE;
stExpectedStatus.b5_QuickStop 				:= TRUE; 
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01111111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S2>S6');
fbDS402.eState := E_DS402State.S2_ReadyToSwitchOn;
fbDS402.bError := TRUE;
fbDS402();
fbDS402.bError := FALSE;

nExpectedState := E_DS402State.S6_FaultReactionActive;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S2>S1_1');
fbDS402.eState := E_DS402State.S2_ReadyToSwitchOn;
fbDS402.stControl := GetDisableVoltageCommand();
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S2>S1_2');
fbDS402.eState := E_DS402State.S2_ReadyToSwitchOn;
fbDS402.stControl := GetQuickStopCommand();
fbDS402.stControl.b1_EnableVoltage := TRUE;
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S2>S3');
fbDS402.eState := E_DS402State.S2_ReadyToSwitchOn;
fbDS402.stControl := GetSwitchOnCommand();
fbDS402();

nExpectedState := E_DS402State.S3_SwitchedOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S3" Id="{00d15a48-73c9-0e57-3e12-7873f76dd4d2}">
      <Declaration><![CDATA[METHOD TestState_S3 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S3');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= TRUE;
stExpectedStatus.b1_SwitchedOn 				:= TRUE;
stExpectedStatus.b2_OperationEnabled		:= FALSE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b5_QuickStop 				:= TRUE; 
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01101111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S3>S6');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402.bError := TRUE;
fbDS402();
fbDS402.bError := FALSE;

nExpectedState := E_DS402State.S6_FaultReactionActive;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S3>S1_1');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402.stControl := GetDisableVoltageCommand();
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S3>S1_2');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402.stControl := GetQuickStopCommand();
fbDS402.stControl.b1_EnableVoltage := TRUE;
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S3>S2');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402.stControl := GetShotdownCommand();
fbDS402();

nExpectedState := E_DS402State.S2_ReadyToSwitchOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S3>S4');
fbDS402.eState := E_DS402State.S3_SwitchedOn;
fbDS402.stControl := GetEnableCommand();
fbDS402();

nExpectedState := E_DS402State.S4_OperationEnabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S4" Id="{a5476881-edbf-03f1-2664-9a39ca902039}">
      <Declaration><![CDATA[METHOD TestState_S4 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S4');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= TRUE;
stExpectedStatus.b1_SwitchedOn 				:= TRUE;
stExpectedStatus.b2_OperationEnabled		:= TRUE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b5_QuickStop 				:= TRUE; 
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01101111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S4>S6');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402.bError := TRUE;
fbDS402();
fbDS402.bError := FALSE;

nExpectedState := E_DS402State.S6_FaultReactionActive;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S4>S1');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402.stControl := GetDisableVoltageCommand();
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S4>S2');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402.stControl := GetShotdownCommand();
fbDS402();

nExpectedState := E_DS402State.S2_ReadyToSwitchOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S4>S3');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402.stControl := GetDisableCommand();
fbDS402();

nExpectedState := E_DS402State.S3_SwitchedOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S4>S7');
fbDS402.eState := E_DS402State.S4_OperationEnabled;
fbDS402.stControl := GetQuickStopCommand();
fbDS402.stControl.b1_EnableVoltage := TRUE;
fbDS402();

nExpectedState := E_DS402State.S7_QuickStopActive;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S5" Id="{cf1873a9-1e58-0819-296f-44ee4df6003f}">
      <Declaration><![CDATA[METHOD TestState_S5 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S5');
fbDS402.eState := E_DS402State.S5_Fault;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= FALSE;
stExpectedStatus.b1_SwitchedOn 				:= FALSE;
stExpectedStatus.b2_OperationEnabled		:= FALSE;
stExpectedStatus.b3_Fault					:= TRUE;
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01001111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S5>S1');
fbDS402.eState := E_DS402State.S5_Fault;
fbDS402.stControl.b7_FaultReset := TRUE;
fbDS402();
fbDS402.stControl.b7_FaultReset := FALSE;

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S6" Id="{7e09e6e3-aad0-0cf6-1fbb-04dc6950f968}">
      <Declaration><![CDATA[METHOD TestState_S6 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S6');
fbDS402.eState := E_DS402State.S6_FaultReactionActive;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= TRUE;
stExpectedStatus.b1_SwitchedOn 				:= TRUE;
stExpectedStatus.b2_OperationEnabled		:= TRUE;
stExpectedStatus.b3_Fault					:= TRUE;
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01001111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S6>S5');
fbDS402.eState := E_DS402State.S6_FaultReactionActive;
fbDS402();

nExpectedState := E_DS402State.S5_Fault;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestState_S7" Id="{a1e72922-22fd-0f1d-0ba7-9f3e6dfeb600}">
      <Declaration><![CDATA[METHOD TestState_S7 : BOOL
VAR
	fbDS402 			: FB_DS402FSM;
	stExpectedStatus 	: ST_DS402_6041h_StatusWord; 
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Set State S7');
fbDS402.eState := E_DS402State.S7_QuickStopActive;
fbDS402();

stExpectedStatus.b0_ReadyToSwitchOn 		:= TRUE;
stExpectedStatus.b1_SwitchedOn 				:= TRUE;
stExpectedStatus.b2_OperationEnabled		:= TRUE;
stExpectedStatus.b3_Fault					:= FALSE;
stExpectedStatus.b5_QuickStop				:= FALSE;
stExpectedStatus.b6_SwitchOnDisabled 		:= FALSE;

MEMCPY(ADR(nMask), ADR(stExpectedStatus), 2);
nResult := (2#01101111 AND fbDS402.nStatus);

AssertEquals(Expected := nMask,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();

TEST('Transition S7>S1');
fbDS402.eState := E_DS402State.S7_QuickStopActive;
fbDS402.stControl := GetDisableVoltageCommand();
fbDS402();

nExpectedState := E_DS402State.S1_SwitchOnDisabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

TEST('Transition S7>S4');
fbDS402.eState := E_DS402State.S7_QuickStopActive;
fbDS402.stControl := GetEnableCommand();
fbDS402();

nExpectedState := E_DS402State.S4_OperationEnabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DS402FSM_Test">
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="7" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetDisableCommand">
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetDisableVoltageCommand">
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetEnableCommand">
      <LineId Id="17" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetQuickStopCommand">
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetShotdownCommand">
      <LineId Id="5" Count="3" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.GetSwitchOnCommand">
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestEnableSequence">
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="5" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="34" Count="1" />
      <LineId Id="25" Count="8" />
      <LineId Id="37" Count="2" />
      <LineId Id="41" Count="7" />
      <LineId Id="36" Count="0" />
      <LineId Id="50" Count="10" />
      <LineId Id="49" Count="0" />
      <LineId Id="62" Count="10" />
      <LineId Id="61" Count="0" />
      <LineId Id="74" Count="10" />
      <LineId Id="73" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="98" Count="0" />
      <LineId Id="90" Count="7" />
      <LineId Id="85" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S0">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="10" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="84" Count="3" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S1">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="10" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="84" Count="3" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S2">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="7" />
      <LineId Id="104" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="139" Count="11" />
      <LineId Id="137" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="121" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="69" Count="0" />
      <LineId Id="123" Count="3" />
      <LineId Id="135" Count="0" />
      <LineId Id="127" Count="7" />
      <LineId Id="122" Count="0" />
      <LineId Id="106" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="3" />
      <LineId Id="117" Count="3" />
      <LineId Id="105" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S3">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="104" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="140" Count="3" />
      <LineId Id="151" Count="0" />
      <LineId Id="144" Count="6" />
      <LineId Id="139" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="69" Count="0" />
      <LineId Id="153" Count="3" />
      <LineId Id="165" Count="0" />
      <LineId Id="157" Count="7" />
      <LineId Id="152" Count="0" />
      <LineId Id="106" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="112" Count="3" />
      <LineId Id="117" Count="3" />
      <LineId Id="105" Count="0" />
      <LineId Id="126" Count="11" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S4">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="104" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="149" Count="4" />
      <LineId Id="161" Count="0" />
      <LineId Id="154" Count="6" />
      <LineId Id="148" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="100" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="83" Count="4" />
      <LineId Id="69" Count="0" />
      <LineId Id="106" Count="2" />
      <LineId Id="111" Count="4" />
      <LineId Id="117" Count="3" />
      <LineId Id="105" Count="0" />
      <LineId Id="122" Count="11" />
      <LineId Id="121" Count="0" />
      <LineId Id="136" Count="3" />
      <LineId Id="162" Count="0" />
      <LineId Id="140" Count="7" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S5">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="149" Count="4" />
      <LineId Id="161" Count="0" />
      <LineId Id="154" Count="6" />
      <LineId Id="148" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S6">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="149" Count="2" />
      <LineId Id="153" Count="7" />
      <LineId Id="148" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
    </LineIds>
    <LineIds Name="FB_DS402FSM_Test.TestState_S7">
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="161" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="149" Count="2" />
      <LineId Id="162" Count="0" />
      <LineId Id="153" Count="7" />
      <LineId Id="148" Count="0" />
      <LineId Id="164" Count="11" />
      <LineId Id="163" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
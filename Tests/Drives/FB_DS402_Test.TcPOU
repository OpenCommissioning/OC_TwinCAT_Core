<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_DS402_Test" Id="{9dbb65ea-4dcf-0ada-18ee-fd4b796673cc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DS402_Test EXTENDS TcUnit.FB_TestSuite

]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestEnable();
TestEnableSTO();

TestSpeedMode('Speed Mode Target_1', 0, 2000, 0);
TestSpeedMode('Speed Mode Target_2', 40000, 2000, 1000);
TestSpeedMode('Speed Mode Target_3', 80000, 2000, 2000);
TestSpeedMode('Speed Mode Target_4', 100000, 2000, 2000);
TestSpeedMode('Speed Mode Target_5', -40000, 2000, -1000);
TestSpeedMode('Speed Mode Target_6', -80000, 2000, -2000);
TestSpeedMode('Speed Mode Target_7', -100000, 2000, -2000);

TestSpeedDriveFactor('Speed Mode Drive Factor_1', 0, 1, 0);
TestSpeedDriveFactor('Speed Mode Drive Factor_2', 40000, 2, 2000);
TestSpeedDriveFactor('Speed Mode Drive Factor_3', 40000, -2, -2000);
TestSpeedDriveFactor('Speed Mode Drive Factor_4', -40000, 2, -2000);
TestSpeedDriveFactor('Speed Mode Drive Factor_5', -40000, -2, 2000);

TestSpeedModeEncoder('Speed Mode Encoder Value_1', 40000, -0.0001, 1, 10000);
TestSpeedModeEncoder('Speed Mode Encoder Value_2', 40000, -0.001, 1, 1000);
TestSpeedModeEncoder('Speed Mode Encoder Value_3', 40000, 0.001, -10, 10000);
TestSpeedModeEncoder('Speed Mode Encoder Value_4', -40000, -0.0001, -1, -10000);
TestSpeedModeEncoder('Speed Mode Encoder Value_5', -40000, 0.001, -1, -1000);
TestSpeedModeEncoder('Speed Mode Encoder Value_6', -40000, -0.001, 10, -10000);

TestSpeedModeModulo('Speed Mode Modulo Value_1', 40000, 0, 10);
TestSpeedModeModulo('Speed Mode Modulo Value_2', 40000, 3, 1);
TestSpeedModeModulo('Speed Mode Modulo Value_3', 40000, 9, 1);

TestSpeedModeOffset('Speed Mode Position Offset Value_1', 40000, 0, 1);
TestSpeedModeOffset('Speed Mode Position Offset Value_2', 40000, 10, 11);
TestSpeedModeOffset('Speed Mode Position Offset Value_3', 40000, 100, 101);
TestSpeedModeOffset('Speed Mode Position Offset Value_4', 40000, -10, -9);
TestSpeedModeOffset('Speed Mode Position Offset Value_5', 40000, -100, -99);

TestSpeedModeLinkOutput('Link Speed Output Factor_1', 40000, E_ControlMode.Speed, 1, 1000);
TestSpeedModeLinkOutput('Link Speed Output Factor_2', 40000, E_ControlMode.Speed, -1, -1000);
TestSpeedModeLinkOutput('Link Speed Output Factor_3', 40000, E_ControlMode.Speed, 2, 2000);
TestSpeedModeLinkOutput('Link Speed Output Factor_4', 40000, E_ControlMode.Speed, -2, -2000);

TestSpeedModeLinkOutput('Link Position Output Factor_1', 40000, E_ControlMode.Position, 1, 1);
TestSpeedModeLinkOutput('Link Position Output Factor_2', 40000, E_ControlMode.Position, -1, -1);
TestSpeedModeLinkOutput('Link Position Output Factor_3', 40000, E_ControlMode.Position, 2, 2);
TestSpeedModeLinkOutput('Link Position Output Factor_4', 40000, E_ControlMode.Position, -2, -2);

TestPositionMode('Set Target Position_1', 0);
TestPositionMode('Set Target Position_2', 1000);
TestPositionMode('Set Target Position_3', 2000);
TestPositionMode('Set Target Position_4', -1000);
TestPositionMode('Set Target Position_5', -2000);

]]></ST>
    </Implementation>
    <Method Name="TestSpeedModeEncoder" Id="{0f2c3a88-473a-0be8-2e94-950652b49901}">
      <Declaration><![CDATA[METHOD TestSpeedModeEncoder : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	fEncoderNumerator 	: REAL;
	fEncoderDenominator : REAL;	
	nExpected 			: DINT;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	nResult 			: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fEncoderNumerator := fEncoderNumerator;
fbDS402.stConfig.fEncoderDenominator := fEncoderDenominator;
fbDS402.stConfig.fReferenceVelocity := 2000;

fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.nTargetValue := nTarget;

fbDS402();
nResult := fbDS402.nPosition;

AssertEquals(Expected := nExpected,
             Actual := nResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSpeedModeModulo" Id="{13bb2bf3-3c07-0198-3d94-7ef05272d3c2}">
      <Declaration><![CDATA[METHOD TestSpeedModeModulo : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	fEncoderModulo	 	: REAL;	
	fExpected 			: REAL;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
	nCycleCount 		: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fReferenceVelocity := 2000;
fbDS402.stConfig.fEncoderModulo := fEncoderModulo;

fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.nTargetValue := nTarget;

FOR nCycleCount := 1 TO 10 DO
    fbDS402();
END_FOR

fResult := fbDS402.fPosition;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableSequence" Id="{1a4f5e5a-5089-0942-0ac5-8b17404af59d}">
      <Declaration><![CDATA[METHOD EnableSequence : REFERENCE TO FB_Test
VAR_INPUT
	fbDS402 : REFERENCE TO FB_DS402;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbDS402.stControlData.b0_SwitchOn := FALSE;
fbDS402.stControlData.b1_EnableVoltage := FALSE;
fbDS402.stControlData.b2_QuickStop := FALSE;
fbDS402.stControlData.b3_EnableOperation := FALSE;
fbDS402();

fbDS402.stControlData.b1_EnableVoltage := TRUE;
fbDS402.stControlData.b2_QuickStop := TRUE;
fbDS402();
fbDS402.stControlData.b0_SwitchOn := TRUE;
fbDS402();
fbDS402.stControlData.b3_EnableOperation := TRUE;
fbDS402();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSpeedMode" Id="{3fd6b6a0-bfd0-0514-0a62-fbd31e125469}">
      <Declaration><![CDATA[METHOD TestSpeedMode : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	fReferenceVelocity	: REAL;
	fExpected 			: REAL;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);
fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fReferenceVelocity := fReferenceVelocity;

fbDS402.nTargetValue := nTarget;

fbDS402();
fResult := fbDS402.fVelocity;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnable" Id="{56256c4d-9ec9-0f51-09a8-2752197b1e55}">
      <Declaration><![CDATA[METHOD TestEnable : BOOL
VAR
	fbDS402 			: FB_DS402;
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Enable STO FALSE');
fbDS402.bSTO := FALSE;

EnableSequence(fbDS402);

nExpectedState := E_DS402State.S0_NotReadyToSwitchOn;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSpeedDriveFactor" Id="{5a53dbf5-ca5d-0089-0d8a-44dea4083814}">
      <Declaration><![CDATA[METHOD TestSpeedDriveFactor : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	fDriveFactor		: REAL;
	fExpected 			: REAL;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);
fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fGearFactor := fDriveFactor;
fbDS402.stConfig.fReferenceVelocity := 2000;

fbDS402.nTargetValue := nTarget;

fbDS402();
fResult := fbDS402.fVelocity;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnableSTO" Id="{b9247e2f-2ca7-07c9-3e34-731272ef2b7c}">
      <Declaration><![CDATA[METHOD TestEnableSTO : BOOL
VAR
	fbDS402 			: FB_DS402;
	nMask 				: WORD;
	nResult 			: WORD;
	bResult 			: BOOL;
	nActualState		: INT;
	nExpectedState		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Enable STO TRUE');
fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

nExpectedState := E_DS402State.S4_OperationEnabled;
nActualState := fbDS402.eState;

AssertEquals(Expected := nExpectedState,
             Actual := nActualState,
             Message := 'State is not correct');	 
TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSpeedModeOffset" Id="{cd9f5b1d-0609-0761-27bf-fe754fc7cc52}">
      <Declaration><![CDATA[METHOD TestSpeedModeOffset : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	fPositionOffset	 	: REAL;	
	fExpected 			: REAL;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fReferenceVelocity := 2000;
fbDS402.stConfig.fPositionOffset := fPositionOffset;

fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.nTargetValue := nTarget;

fbDS402();

fResult := fbDS402.fPosition;

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestPositionMode" Id="{f4ac02f8-da77-0ceb-297c-7a91e5f0cddc}">
      <Declaration><![CDATA[METHOD TestPositionMode : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	fTarget				: REAL;	
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);
fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.stConfig.eControlMode := E_ControlMode.Position;
fbDS402.nTargetValue := REAL_TO_DINT(fTarget * fbDS402.stConfig.fEncoderDenominator / fbDS402.stConfig.fEncoderNumerator);

fbDS402();
fResult := fbDS402.fPosition;

AssertEquals(Expected := fTarget,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSpeedModeLinkOutput" Id="{ff67ab61-f21d-024f-10e7-55b9f6c9d8e1}">
      <Declaration><![CDATA[METHOD TestSpeedModeLinkOutput : BOOL
VAR_INPUT
	sName 				: T_MaxString;
	nTarget				: DINT;
	eLinkControlMode 	: E_ControlMode;
	fLinkOutputFactor	: REAL;	
	fExpected 			: REAL;
END_VAR

VAR
	fbDS402 			: FB_DS402;	
	fResult 			: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

fbDS402.stConfig.eControlMode := E_ControlMode.Speed;
fbDS402.stConfig.fReferenceVelocity := 2000;
fbDS402.stConfig.eLinkControlMode := eLinkControlMode;
fbDS402.stConfig.fLinkOutputFactor := fLinkOutputFactor;

fbDS402.bSTO := TRUE;
EnableSequence(fbDS402);

fbDS402.nTargetValue := nTarget;

fbDS402();

fResult := fbDS402.GetLinkControlData();

AssertEquals(Expected := fExpected,
             Actual := fResult,
             Message := 'Value is not correct');	 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
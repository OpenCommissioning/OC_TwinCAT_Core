<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Encoder_Test" Id="{2e2b1666-3023-0dca-3449-a99196318ada}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Encoder_Test EXTENDS FB_TestSuite
VAR	
	stConfig 			: ST_EncoderConfig;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestCase_Encoder('Absolute 1', 0, 0, LREAL_TO_DINT(0*1E4), stConfig);
TestCase_Encoder('Absolute 2', 100, 100, LREAL_TO_DINT(100*1E4), stConfig);
TestCase_Encoder('Absolute 3', -100, -100, LREAL_TO_DINT(-100*1E4), stConfig);

stConfig.fInputFactor := -1;
TestCase_Encoder('Absolute with Factor 1', 0, 0, LREAL_TO_DINT(0*1E4), stConfig);
TestCase_Encoder('Absolute with Factor 2', 100, -100, LREAL_TO_DINT(-100*1E4), stConfig);
TestCase_Encoder('Absolute with Factor 3', -100, 100, LREAL_TO_DINT(100*1E4), stConfig);

stConfig.fInputFactor := 1;
stConfig.bInvertIncrementValue := TRUE;
TestCase_Encoder('Absolute with Invert 1', 0, 0, LREAL_TO_DINT(0*1E4), stConfig);
TestCase_Encoder('Absolute with Invert 2', 100, 100, LREAL_TO_DINT(-100*1E4), stConfig);
TestCase_Encoder('Absolute with Invert 3', -100, -100, LREAL_TO_DINT(100*1E4), stConfig);

stConfig.fModulo := 360;
stConfig.bInvertIncrementValue := FALSE;
TestCase_Encoder('Modulo 1', 0, 0, LREAL_TO_DINT(0*1E4), stConfig);
TestCase_Encoder('Modulo 2', 360, 0, LREAL_TO_DINT(0*1E4), stConfig);
TestCase_Encoder('Modulo 3', 350, 350, LREAL_TO_DINT(350*1E4), stConfig);
TestCase_Encoder('Modulo 4', -350, -350, LREAL_TO_DINT(-350*1E4), stConfig);
TestCase_Encoder('Modulo 5', -360, 0, LREAL_TO_DINT(0*1E4), stConfig);

stConfig.fModulo := 0;
stConfig.bInvertIncrementValue := FALSE;
stConfig.bIsIntegral := TRUE;
TestCase_Encoder('Integrate 1', 0, 0, 0, stConfig);
TestCase_Encoder('Integrate 2', 100, 1, LREAL_TO_DINT(1*1E4), stConfig);
TestCase_Encoder('Integrate 3', -100, -1, LREAL_TO_DINT(-1*1E4), stConfig);]]></ST>
    </Implementation>
    <Method Name="TestCase_Encoder" Id="{dc10b32a-3ed5-0a79-0d3c-95258e3cf3ee}">
      <Declaration><![CDATA[METHOD TestCase_Encoder
VAR_INPUT
	sName 					: T_MaxString;
	fInput					: REAL;
	fExpected				: LREAL;
	nExpected				: DINT;
	stConfig				: ST_EncoderConfig;
END_VAR

VAR	
	fbEncoder 				: FB_Encoder;
	nCycleCount 			: INT;
	fActual					: LREAL;	
	nActual					: DINT;	
	bValid 					: BOOL;
	fTolerance 				: REAL := 1E-6;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(sName);

fbEncoder.stConfig := stConfig;
fbEncoder.fInput := fInput;

(*	Call FB to test	*)
FOR nCycleCount := 0 TO 9 DO
   fbEncoder();
END_FOR

(*	Evaluation of results	*)
nActual := fbEncoder.nPosition;
fActual := fbEncoder.fPosition;

AssertEquals(Expected := nExpected,
             Actual := nActual,
             Message := 'nPosition is not correct');

bValid := ABS(fExpected - fActual) < fTolerance;			 
	
AssertTrue(bValid, 'fPosition is not correct');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Encoder_Test">
      <LineId Id="42" Count="2" />
      <LineId Id="53" Count="1" />
      <LineId Id="51" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="FB_Encoder_Test.TestCase_Encoder">
      <LineId Id="6" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="49" Count="1" />
      <LineId Id="43" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="54" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>